-- for MySQL 5.7
-- in MySQL 8.0, we can use CTE (Common Table Expressions) to simplify the query
-- in Postgres, we can use generate_series() to simplify the query

-- 1. Write a query that counts the number of emails sent for each campaign.

SELECT email_send.campaign_id, COUNT(email_send.user_id)
FROM `email_send`
GROUP BY email_send.campaign_id

-- 2. Write a query that counts the number of emails sent for each campaign.

SELECT
	CONCAT(YEAR(ws.week_start), '-', LPAD(WEEK(ws.week_start), 2, "0")) AS week_name,
	COUNT(es.event_time) AS emails_sent
FROM (
	SELECT
		TIMESTAMP(DATE_SUB(DATE_SUB(CURDATE(), INTERVAL DAYOFWEEK(CURDATE()) - 1 DAY), INTERVAL weeknumber WEEK)) AS week_start,
		TIMESTAMP(DATE_SUB(DATE_SUB(CURDATE(), INTERVAL DAYOFWEEK(CURDATE()) - 1 DAY), INTERVAL weeknumber WEEK) + INTERVAL 1 WEEK - INTERVAL 1 SECOND) AS week_end
	FROM (
		SELECT @row := @row + 1 AS weeknumber
		FROM (select 0 union all select 1) t0, -- 2
 			(select 0 union all select 1) t1, -- 4
 			(select 0 union all select 1) t2, -- 8
 			(select 0 union all select 1) t3, -- 16
 			(select 0 union all select 1) t4, -- 32
			(select @row:=-1) tr
		LIMIT 26 -- weeks
	) AS numbers) ws
LEFT JOIN
	email_send es
		ON es.event_time >= ws.week_start AND es.event_time <= ws.week_end
GROUP BY
	week_name
ORDER BY
	week_name DESC

-- 3. Write a query that calculates the open rate of each campaign.

SELECT
    s.campaign_id,
    IFNULL(COUNT(DISTINCT o.user_id), 0) / COUNT(DISTINCT s.user_id) * 100 AS open_rate
FROM
    email_send s
LEFT JOIN
    email_open o ON s.campaign_id = o.campaign_id AND s.user_id = o.user_id
GROUP BY
    s.campaign_id;
